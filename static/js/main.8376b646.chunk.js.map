{"version":3,"sources":["components/GameTile.js","components/Scoreboard.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["GameTile","props","react_default","a","createElement","className","name","data-id","id","onClick","event","handleClick","alt","src","image","Scoreboard","score","round","Jumbotron","tiles","App","state","isClicked","shuffleCards","array","i","length","j","Math","floor","random","_ref","immutablePush","arr","newEntry","concat","Object","toConsumableArray","parseInt","target","getAttribute","clickedBoolean","_this","includes","alert","setState","addClicked","console","log","_this2","this","components_Jumbotron","components_Scoreboard","map","gameTile","components_GameTile","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8376b646.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GameTile= (props) => {\r\n  \r\n    return (\r\n        <div className=\"gameTile\" name={props.name} data-id={props.id} onClick={(event) => props.handleClick(event)}>\r\n            <div className=\"img-container\" data-id={props.id}>\r\n            <img className=\"gameTileImage\" alt={props.name} src={props.image} data-id={props.id}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default GameTile;","import React from 'react';\r\n\r\n\r\nconst Scoreboard = (props) => {\r\n    return (\r\n        <div>\r\n           <h2>Score = {props.score}</h2>\r\n            <h2>Round = {props.round}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard;","import React from \"react\";\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n    <div className=\"jumbotron\">\r\n        <h1>Smash Bros. Memory Game</h1>    \r\n        <p>Test your memory by clicking on all the characters without clicking on the same character twice!</p>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from 'react';\n\nimport './App.css';\nimport GameTile from \"./components/GameTile\";\nimport Scoreboard from \"./components/Scoreboard\"\nimport Jumbotron from \"./components/Jumbotron\"\n\n\nconst tiles = [\n  {\n    id: 1,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/4/49/Bowser_SSBU.png/375px-Bowser_SSBU.png\"\n  }, \n  {\n    id: 2,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/8/82/Ness_SSBU.png/375px-Ness_SSBU.png\"\n  }, \n  {\n    id: 3,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/d/da/Captain_Falcon_SSBU.png/300px-Captain_Falcon_SSBU.png\"\n  }, \n  {\n    id: 4,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/b/b5/SuperMarioParty_DonkeyKong.png/525px-SuperMarioParty_DonkeyKong.png\"\n  }, \n  {\n    id: 5,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/4/44/Mario_SSBU.png/300px-Mario_SSBU.png\"\n  }, \n  {\n    id: 6,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/0/03/Samus_SSBU.png/300px-Samus_SSBU.png\"\n  }, \n  {\n    id: 7,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/8/8d/Yoshi_SSBU.png/375px-Yoshi_SSBU.png\"\n  }, \n  {\n    id: 8,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/9/93/Pikachu_SSBU.png/375px-Pikachu_SSBU.png\"\n  }, \n  {\n    id: 9,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/6/6a/Jigglypuff_SSBU.png/375px-Jigglypuff_SSBU.png\"\n  }, \n  {\n    id: 10,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/b/bb/Luigi_SSBU.png/375px-Luigi_SSBU.png\"\n  }, \n  {\n    id: 11,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/e/ed/Kirby_SSB4.png/300px-Kirby_SSB4.png\"\n  }, \n  {\n    id: 12,\n    name: \"test\",\n    image: \"https://www.ssbwiki.com/images/thumb/8/84/Link_SSBU.png/300px-Link_SSBU.png\"\n  }\n];\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    isClicked: [],\n    round: 1\n  }\n\n  shuffleCards = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n  }\n\n  immutablePush = (arr, newEntry) =>{\n    return [ ...arr, newEntry ]      \n  }\n\n  handleClick = event => {\n\n    const id = parseInt(event.target.getAttribute(\"data-id\"))\n    const clickedBoolean = this.state.isClicked.includes(id)\n    if ((this.state.score + 1) % 12 === 0 && !clickedBoolean ){\n      alert(`Congratulations! You have completed round ${this.state.round}. The tiles have been reset`);\n      this.setState({isClicked: [], round: this.state.round + 1, score: this.state.score + 1});\n    } else if (clickedBoolean){\n      alert(\"Game Over\")\n      this.setState({score: 0, isClicked: [], round: 1})\n    } else {\n      const addClicked = this.immutablePush(this.state.isClicked, id)\n      this.setState({isClicked: addClicked, score: this.state.score + 1})\n      console.log(this.state.isClicked);\n      this.shuffleCards(tiles);\n    }\n      \n    }\n\n  \n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron />\n        <Scoreboard score={this.state.score} round={this.state.round} />\n        {tiles.map(gameTile =>(\n          <GameTile\n            handleClick= {this.handleClick}\n            id={gameTile.id}\n            key={gameTile.id}\n            name={gameTile.name}\n            image={gameTile.image}\n            />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}